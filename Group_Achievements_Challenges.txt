Dining Philosopher Group Project

Authors: Ryan Johnson, Dustin Gardner

Achieved Checklist:
- Requirements

1. The solution was uploaded to GitHub, and the location of the
        repository emailed to the professor.

3. The presentation includes an explanation of the group’s
        solution and how it	solves the problem.

4. The presentation will be 10-20 minutes long, and each student
        will speak during the presentation to describe some	part of	the
        problem	and/or group’s solution.

5. The philosophers are separate threads and access a shared resource safely.

6. The solution avoids starvation and deadlock, allowing all philosophers to eat.

7. Displays useful information to the users:
        - Each philosopher:
            - How many times the philosopher was able to eat.
            - Chopstick right and left numbers assigned.
            - Total thinking time and percent of time thinking compared to total dinning time allowed.
            - Total eating time and percent of time eating compared to total dinning time allowed.
        - Chopstick number and how many times it was picked up successfully.


Challenges:

        The group found that a few of the threads were in a wait() even though the time to eat was finished.
        The program would not exist because the thread was in a wait status and unable to finish its run method.
        Our solution to this problem was adding the boolean running. This also allowed some philosophers
        to starve. Our group realized that having to wait() and notify() in the chopstick class was unnecessary.
        It was extra code that we removed because even if the waiting thread was notified, the thread, after thinking,
        would not pass the check for availability using the grabchopstick method and would release the chopstick anyway.
        This was fixed in the philosopher class by having the philosopher go back to thinking if they were not
        successful in acquiring the chopsticks.


        A semaphore was used to try to fix the starvation issue, but the group found this was the wrong tool for the
        job. We used it as a simple mutex, allowing only one thread to access the resource. This solution failed.


        We ran into a deadlock when all the philosophers grabbed the left chopstick simultaneously, not allowing any of
        them to grab the right chopstick. We solved this by adding a check when picking up the right chopstick. If the
        right chopstick were unavailable, the philosopher would release the left one if they acquired it.


        We also had issues with what to do when the philosopher could not acquire both chopsticks due to putting
        the think method inside the grabchopstick method. This gave us false success in their eating.
        We fixed this issue using the grabchopstick method to return a boolean and checked this using the run method.